<?php
require_once __DIR__ . '/../LAMP.php';
require_once __DIR__ . '/../driver/ResultEventDriver.php';

/**
 * @OA\Schema(
 *   type="string",
 *   enum={"none", "correct", "valid"},
 *   description="The type of detail.",
 * )
 */
abstract class DetailType extends LAMP {
    const None = 'none';
    const Correct = 'correct';
    const Valid = 'valid';
}

/**
 * @OA\Schema(
 *   description="A specific sub-detail of a `Result` that contains specific interaction information that comprises the parent `Result`.",
 * )
 */
class TemporalEvent extends LAMP {

    /** 
     * @OA\Property(
     *   @OA\Schema(),
     *   description="The item that was interacted with; for example, in a Jewels game, the corresponding alphabet, or in a survey, the question index.",
     * )
     */
    public $item = null;

    /** 
     * @OA\Property(
     *   @OA\Schema(),
     *   description="The value of the item that was interacted with; in most games, this field is `null`, but in a survey, this field is the question choice index.",
     * )
     */
    public $value = null;

    /** 
     * @OA\Property(
     *   ref="#/components/schemas/DetailType",
     *   description="The type of interaction that for this detail; for example, in a Jewels game, `DetailType.none` if the tapped jewel was incorrect, or `DetailType.correct` if it was correct, or in a survey, this field will be `null`.",
     * )
     */
    public $type = null;

    /** 
     * @OA\Property(
     *   type="integer",
     *   format="int64",
     *   description="The time difference from the previous detail or the start of the parent result.",
     * )
     */
    public $duration = null;

    /** 
     * @OA\Property(
     *   type="integer",
     *   format="int64",
     *   description="The level of activity for this detail; for example, in games with multiple levels, this field might be `2` or `4`, but for surveys and other games this field will be `null`.",
     * )
     */
    public $level = null;
}

/**
 * @OA\Schema(
 *   description="An event generated by the participant interacting with an `Activity`."
 * )
 */
class ResultEvent extends LAMP {
    use ResultEventDriver;

    /**
     * @OA\Property(
     *   ref="#/components/schemas/Identifier",
     *   x={"type"="#/components/schemas/ResultEvent"},
     *   description="The self-referencing identifier to this object.",
     * )
     */
    public $id = null;

    /** 
     * @OA\Property(
     *   ref="#/components/schemas/Attachments",
     *   description="External or out-of-line objects attached to this object.",
     * )
     */
    public $attachments = null;

    /**
     * @OA\Property(
     *   ref="#/components/schemas/Identifier",
     *   x={"type"="#/components/schemas/Activity"},
     *   description="The activity that produced this result event.",
     * )
     */
    public $activity = null;

    /**
     * @OA\Property(
     *   ref="#/components/schemas/Timestamp",
     *   description="The date and time when this event started recording.",
     * )
     */
    public $timestamp = null;

    /**
     * @OA\Property(
     *   ref="#/components/schemas/Timestamp",
     *   description="The duration this event lasted before recording ended.",
     * )
     */
    public $duration = null;

    /**
     * @OA\Property(
     *   @OA\Schema(@OA\AdditionalProperties()),
     *   description="The summary information for the result event as determined by the activity that created this result event.",
     * )
     */
    public $static_data = null;

    /** 
     * @OA\Property(
     *   type="array",
     *   @OA\Items(
     *     ref="#/components/schemas/TemporalEvent"
     *   ),
     *   description="The specific interaction details of the result event.",
     * )
     */
    public $temporal_events = null;

	/**
	 * @OA\Post(
	 *   path="/participant/{participant_id}/result_event/",
	 *   operationId="ResultEvent::create",
	 *   tags={"ResultEvent"},
	 *   x={"owner"={
	 *     "$ref"="#/components/schemas/ResultEvent"}
	 *   },
	 *   summary="Get a single result event, by identifier.",
	 *   description="Get a single result event, by identifier.",
	 *   @OA\Parameter(
	 *     name="participant_id",
	 *     in="path",
	 *     required=true,
	 *     @OA\Schema(
	 *       ref="#/components/schemas/Identifier",
	 *       x={"type"={
	 *         "$ref"="#/components/schemas/Participant"}
	 *       },
	 *     )
	 *   ),
	 *   @OA\RequestBody(
	 *     required=true,
	 *     @OA\JsonContent(
	 *       ref="#/components/responses/ResultEvent"
	 *     ),
	 *   ),
	 *   @OA\Response(response=200, ref="#/components/responses/Success"),
	 *   @OA\Response(response=403, ref="#/components/responses/Forbidden"),
	 *   @OA\Response(response=404, ref="#/components/responses/NotFound"),
	 *   @OA\Response(response=500, ref="#/components/responses/ServerFault"),
	 *   security={{"Authorization": {}}},
	 * )
	 */
	public static function create($participant_id, $result_event) {
		$_id = (new TypeID($participant_id))->require([ResultEvent::class]);
		self::authorize(function($type, $value) use($_id) {
			if ($_id->part(2) > 0) return true;
			// CTest shortcut
			return false; // TODO surveys
		});
		return null;
	}

	/**
	 * @OA\Put(
	 *   path="/result_event/{result_event_id}",
	 *   operationId="ResultEvent::update",
	 *   tags={"ResultEvent"},
	 *   x={"owner"={
	 *     "$ref"="#/components/schemas/ResultEvent"}
	 *   },
	 *   summary="Get a single result event, by identifier.",
	 *   description="Get a single result event, by identifier.",
	 *   @OA\Parameter(
	 *     name="result_event_id",
	 *     in="path",
	 *     required=true,
	 *     @OA\Schema(
	 *       ref="#/components/schemas/Identifier",
	 *       x={"type"={
	 *         "$ref"="#/components/schemas/ResultEvent"}
	 *       },
	 *     )
	 *   ),
	 *   @OA\RequestBody(
	 *     required=true,
	 *     @OA\JsonContent(
	 *       ref="#/components/responses/ResultEvent"
	 *     ),
	 *   ),
	 *   @OA\Response(response=200, ref="#/components/responses/Success"),
	 *   @OA\Response(response=403, ref="#/components/responses/Forbidden"),
	 *   @OA\Response(response=404, ref="#/components/responses/NotFound"),
	 *   @OA\Response(response=500, ref="#/components/responses/ServerFault"),
	 *   security={{"Authorization": {}}},
	 * )
	 */
	public static function update($result_event_id, $result_event) {
		$_id = (new TypeID($result_event_id))->require([ResultEvent::class]);
		self::authorize(function($type, $value) use($_id) {
			if ($_id->part(2) > 0) return true;
			// CTest shortcut
			return false; // TODO surveys
		});
		return null;
	}

	/**
	 * @OA\Delete(
	 *   path="/result_event/{result_event_id}",
	 *   operationId="ResultEvent::delete",
	 *   tags={"ResultEvent"},
	 *   x={"owner"={
	 *     "$ref"="#/components/schemas/ResultEvent"}
	 *   },
	 *   summary="Get a single result event, by identifier.",
	 *   description="Get a single result event, by identifier.",
	 *   @OA\Parameter(
	 *     name="result_event_id",
	 *     in="path",
	 *     required=true,
	 *     @OA\Schema(
	 *       ref="#/components/schemas/Identifier",
	 *       x={"type"={
	 *         "$ref"="#/components/schemas/ResultEvent"}
	 *       },
	 *     )
	 *   ),
	 *   @OA\Response(response=200, ref="#/components/responses/Success"),
	 *   @OA\Response(response=403, ref="#/components/responses/Forbidden"),
	 *   @OA\Response(response=404, ref="#/components/responses/NotFound"),
	 *   @OA\Response(response=500, ref="#/components/responses/ServerFault"),
	 *   security={{"Authorization": {}}},
	 * )
	 */
	public static function delete($result_event_id) {
		$_id = (new TypeID($result_event_id))->require([ResultEvent::class]);
		self::authorize(function($type, $value) use($_id) {
			if ($_id->part(2) > 0) return true;
			// CTest shortcut
			return false; // TODO surveys
		});
		return null;
	}

    /** 
     * @OA\Get(
     *   path="/result_event/{result_event_id}",
     *   operationId="ResultEvent::view",
     *   tags={"ResultEvent"},
     *   x={"owner"={
     *     "$ref"="#/components/schemas/ResultEvent"}
     *   },
     *   summary="Get a single result event, by identifier.",
     *   description="Get a single result event, by identifier.",
     *   @OA\Parameter(
     *     name="result_event_id",
     *     in="path",
     *     required=true,
     *     @OA\Schema(
     *       ref="#/components/schemas/Identifier",
     *       x={"type"={
     *         "$ref"="#/components/schemas/ResultEvent"}
     *       },
     *     )
     *   ),
     *   @OA\Response(response=200, ref="#/components/responses/Success"),
     *   @OA\Response(response=403, ref="#/components/responses/Forbidden"),
     *   @OA\Response(response=404, ref="#/components/responses/NotFound"),
     *   @OA\Response(response=500, ref="#/components/responses/ServerFault"),
     *   security={{"Authorization": {}}},
     * )
     */
    public static function view($result_event_id) {
        $_id = (new TypeID($result_event_id))->require([ResultEvent::class]);
        self::authorize(function($type, $value) use($_id) {
            if ($_id->part(2) > 0) return true;
                // CTest shortcut
            return false; // TODO surveys
        });
		return null;
    }
    
    /** 
     * @OA\Get(
     *   path="/participant/{participant_id}/activity/{activity_id}/result_event",
     *   operationId="ResultEvent::all_by_participant_activity",
     *   tags={"ResultEvent"},
     *   x={"owner"={
     *     "$ref"="#/components/schemas/ResultEvent"}
     *   },
     *   summary="Get the set of all result events produced by a given participant interacting with a given activity, by identifiers of both.",
     *   description="Get the set of all result events produced by a given participant interacting with a given activity, by identifiers of both.",
     *   @OA\Parameter(
     *     name="participant_id",
     *     in="path",
     *     required=true,
     *     @OA\Schema(
     *       ref="#/components/schemas/Identifier",
     *       x={"type"={
     *         "$ref"="#/components/schemas/Participant"}
     *       },
     *     )
     *   ),
     *   @OA\Parameter(
     *     name="activity_id",
     *     in="path",
     *     required=true,
     *     @OA\Schema(
     *       ref="#/components/schemas/Identifier",
     *       x={"type"={
     *         "$ref"="#/components/schemas/Activity"}
     *       },
     *     )
     *   ),
     *   @OA\Response(response=200, ref="#/components/responses/Success"),
     *   @OA\Response(response=403, ref="#/components/responses/Forbidden"),
     *   @OA\Response(response=404, ref="#/components/responses/NotFound"),
     *   @OA\Response(response=500, ref="#/components/responses/ServerFault"),
     *   security={{"Authorization": {}}},
     * )
     */
    public static function all_by_participant_activity($participant_id, $activity_id) {
        $aid = (new TypeID($activity_id))->require([Activity::class]);
        self::authorize(function($type, $value) use($participant_id, $aid) {
            $_id1 = self::parent_of($aid, Activity::class, Researcher::class);
            $_id2 = self::parent_of($participant_id, Participant::class, Researcher::class);
            if ($type == AuthType::Researcher) {
                return $value == $_id1->part(1) && $value == $_id2->part(1);
            } else if ($type == AuthType::Participant) {
                return ($value == $participant_id) && ($_id2->part(1) == $_id1->part(1));
            } else return false;
        });
		return null;
    }
    
    /** 
     * @OA\Get(
     *   path="/participant/{participant_id}/result_event",
     *   operationId="ResultEvent::all_by_participant",
     *   tags={"ResultEvent"},
     *   x={"owner"={
     *     "$ref"="#/components/schemas/ResultEvent"}
     *   },
     *   summary="Get the set of all result events produced by a given participant, by identifier.",
     *   description="Get the set of all result events produced by a given participant, by identifier.",
     *   @OA\Parameter(
     *     name="participant_id",
     *     in="path",
     *     required=true,
     *     @OA\Schema(
     *       ref="#/components/schemas/Identifier",
     *       x={"type"={
     *         "$ref"="#/components/schemas/Participant"}
     *       },
     *     )
     *   ),
     *   @OA\Response(response=200, ref="#/components/responses/Success"),
     *   @OA\Response(response=403, ref="#/components/responses/Forbidden"),
     *   @OA\Response(response=404, ref="#/components/responses/NotFound"),
     *   @OA\Response(response=500, ref="#/components/responses/ServerFault"),
     *   security={{"Authorization": {}}},
     * )
     */
    public static function all_by_participant($participant_id) {
        self::authorize(function($type, $value) use($participant_id) {
            if ($type == AuthType::Researcher) {
                $_id = self::parent_of($participant_id, Participant::class, Researcher::class);
                return $value == $_id->part(1);
            } else if ($type == AuthType::Participant) {
                return $value == $participant_id;
            } else return false;
        });
    	return self::_select(null, $participant_id);
    }
    
    /** 
     * @OA\Get(
     *   path="/study/{study_id}/activity/{activity_id}/result_event",
     *   operationId="ResultEvent::all_by_study_activity",
     *   tags={"ResultEvent"},
     *   x={"owner"={
     *     "$ref"="#/components/schemas/ResultEvent"}
     *   },
     *   summary="Get the set of all result events produced by all participants enrolled in a given study interacting with a given activity, by identifiers of both.",
     *   description="Get the set of all result events produced by all participants enrolled in a given study interacting with a given activity, by identifiers of both.",
     *   @OA\Parameter(
     *     name="study_id",
     *     in="path",
     *     required=true,
     *     @OA\Schema(
     *       ref="#/components/schemas/Identifier",
     *       x={"type"={
     *         "$ref"="#/components/schemas/Study"}
     *       },
     *     )
     *   ),
     *   @OA\Parameter(
     *     name="activity_id",
     *     in="path",
     *     required=true,
     *     @OA\Schema(
     *       ref="#/components/schemas/Identifier",
     *       x={"type"={
     *         "$ref"="#/components/schemas/Activity"}
     *       },
     *     )
     *   ),
     *   @OA\Response(response=200, ref="#/components/responses/Success"),
     *   @OA\Response(response=403, ref="#/components/responses/Forbidden"),
     *   @OA\Response(response=404, ref="#/components/responses/NotFound"),
     *   @OA\Response(response=500, ref="#/components/responses/ServerFault"),
     *   security={{"Authorization": {}}},
     * )
     */
    public static function all_by_study_activity($study_id, $activity_id) {
		return ResultEvent::all_by_researcher_activity($study_id, $activity_id);
    }
    
    /** 
     * @OA\Get(
     *   path="/researcher/{researcher_id}/activity/{activity_id}/result_event",
     *   operationId="ResultEvent::all_by_researcher_activity",
     *   tags={"ResultEvent"},
     *   x={"owner"={
     *     "$ref"="#/components/schemas/ResultEvent"}
     *   },
     *   summary="Get the set of all result events produced by all participants enrolled in any study conducted by a given researcher interacting with a given activity, by identifiers of both.",
     *   description="Get the set of all result events produced by all participants enrolled in any study conducted by a given researcher interacting with a given activity, by identifiers of both.",
     *   @OA\Parameter(
     *     name="researcher_id",
     *     in="path",
     *     required=true,
     *     @OA\Schema(
     *       ref="#/components/schemas/Identifier",
     *       x={"type"={
     *         "$ref"="#/components/schemas/Researcher"}
     *       },
     *     )
     *   ),
     *   @OA\Parameter(
     *     name="activity_id",
     *     in="path",
     *     required=true,
     *     @OA\Schema(
     *       ref="#/components/schemas/Identifier",
     *       x={"type"={
     *         "$ref"="#/components/schemas/Activity"}
     *       },
     *     )
     *   ),
     *   @OA\Response(response=200, ref="#/components/responses/Success"),
     *   @OA\Response(response=403, ref="#/components/responses/Forbidden"),
     *   @OA\Response(response=404, ref="#/components/responses/NotFound"),
     *   @OA\Response(response=500, ref="#/components/responses/ServerFault"),
     *   security={{"Authorization": {}}},
     * )
     */
    public static function all_by_researcher_activity($researcher_id, $activity_id) {
        $_id = (new TypeID($researcher_id))->require([Researcher::class, Study::class]);
        $aid = (new TypeID($activity_id))->require([Activity::class]);
        self::authorize(function($type, $value) use($_id, $aid) {
            $_id1 = self::parent_of($aid, Activity::class, Researcher::class);
            return ($type == AuthType::Researcher && 
                        $value == $_id->part(1) && 
                        $value == $_id1->part(1));
        });
		return null;
    }
    
    /** 
     * @OA\Get(
     *   path="/activity/{activity_id}/result_event",
     *   operationId="ResultEvent::all_by_activity",
     *   tags={"ResultEvent"},
     *   x={"owner"={
     *     "$ref"="#/components/schemas/ResultEvent"}
     *   },
     *   summary="Get the set of all result events produced by interacting with a given activity, by identifier.",
     *   description="Get the set of all result events produced by interacting with a given activity, by identifier.",
     *   @OA\Parameter(
     *     name="activity_id",
     *     in="path",
     *     required=true,
     *     @OA\Schema(
     *       ref="#/components/schemas/Identifier",
     *       x={"type"={
     *         "$ref"="#/components/schemas/Activity"}
     *       },
     *     )
     *   ),
     *   @OA\Response(response=200, ref="#/components/responses/Success"),
     *   @OA\Response(response=403, ref="#/components/responses/Forbidden"),
     *   @OA\Response(response=404, ref="#/components/responses/NotFound"),
     *   @OA\Response(response=500, ref="#/components/responses/ServerFault"),
     *   security={{"Authorization": {}}},
     * )
     */
    public static function all_by_activity($activity_id) {
        $aid = (new TypeID($activity_id))->require([Activity::class]);
        self::authorize(function($type, $value) use($aid) {
            $_id1 = self::parent_of($aid, Activity::class, Researcher::class);
            if ($type == AuthType::Researcher) {
                return $value == $_id1->part(1);
            } else if ($type == AuthType::Participant) {
                $_id2 = self::parent_of($value, Participant::class, Researcher::class);
                return $_id2->part(1) == $_id1->part(1);
            } else return false;
        });
		return null;
    }
    
    /** 
     * @OA\Get(
     *   path="/study/{study_id}/result_event",
     *   operationId="ResultEvent::all_by_study",
     *   tags={"ResultEvent"},
     *   x={"owner"={
     *     "$ref"="#/components/schemas/ResultEvent"}
     *   },
     *   summary="Get the set of all result_events produced by all participants enrolled in a given study, by identifier.",
     *   description="Get the set of all result_events produced by all participants enrolled in a given study, by identifier.",
     *   @OA\Parameter(
     *     name="study_id",
     *     in="path",
     *     required=true,
     *     @OA\Schema(
     *       ref="#/components/schemas/Identifier",
     *       x={"type"={
     *         "$ref"="#/components/schemas/Study"}
     *       },
     *     )
     *   ),
     *   @OA\Response(response=200, ref="#/components/responses/Success"),
     *   @OA\Response(response=403, ref="#/components/responses/Forbidden"),
     *   @OA\Response(response=404, ref="#/components/responses/NotFound"),
     *   @OA\Response(response=500, ref="#/components/responses/ServerFault"),
     *   security={{"Authorization": {}}},
     * )
     */
    public static function all_by_study($study_id) {
        return ResultEvent::all_by_researcher($study_id);
    }
    
    /** 
     * @OA\Get(
     *   path="/researcher/{researcher_id}/result_event",
     *   operationId="ResultEvent::all_by_researcher",
     *   tags={"ResultEvent"},
     *   x={"owner"={
     *     "$ref"="#/components/schemas/ResultEvent"}
     *   },
     *   summary="Get the set of all result_events produced by all participants enrolled in any study conducted by a given researcher, by identifier.",
     *   description="Get the set of all result_events produced by all participants enrolled in any study conducted by a given researcher, by identifier.",
     *   @OA\Parameter(
     *     name="researcher_id",
     *     in="path",
     *     required=true,
     *     @OA\Schema(
     *       ref="#/components/schemas/Identifier",
     *       x={"type"={
     *         "$ref"="#/components/schemas/Researcher"}
     *       },
     *     )
     *   ),
     *   @OA\Response(response=200, ref="#/components/responses/Success"),
     *   @OA\Response(response=403, ref="#/components/responses/Forbidden"),
     *   @OA\Response(response=404, ref="#/components/responses/NotFound"),
     *   @OA\Response(response=500, ref="#/components/responses/ServerFault"),
     *   security={{"Authorization": {}}},
     * )
     */
    public static function all_by_researcher($researcher_id) {
        $_id = (new TypeID($researcher_id))->require([Researcher::class, Study::class]);
        self::authorize(function($type, $value) use($_id) {
            return ($type == AuthType::Researcher && $value == $_id->part(1));
        });
        return self::_select(null, null, $_id->part(1));
    }

    /** 
     * @OA\Get(
     *   path="/result_event",
     *   operationId="ResultEvent::all",
     *   tags={"ResultEvent"},
     *   x={"owner"={
     *     "$ref"="#/components/schemas/ResultEvent"}
     *   },
     *   summary="Get the set of all result events.",
     *   description="Get the set of all result events.",
     *   @OA\Response(response=200, ref="#/components/responses/Success"),
     *   @OA\Response(response=403, ref="#/components/responses/Forbidden"),
     *   @OA\Response(response=404, ref="#/components/responses/NotFound"),
     *   @OA\Response(response=500, ref="#/components/responses/ServerFault"),
     *   security={{"Authorization": {}}},
     * )
     */
    public static function all() {
        self::authorize(function($type, $value) {
            return false;
        });
        return self::_select();
    }
}
